---
title: Tutorial
order: 2
layout: page
---

[[ce.tutorial]]
= Getting Started with Collaboration Engine
:sectnums:

This tutorial shows basic steps to set up Collaboration Engine in your Vaadin project
and subscribe a user to a single topic.

[[ce.tutorial.setup]]
== Prepare the Application

=== Set Up a Vaadin Project
Download an empty Vaadin 14 project from https://vaadin.com/start/v14
using any technology stack.

=== Update Project Dependencies
In the project's pom.xml file, add the `vaadin-prerelease` repository:
[source, xml]
----
<repository>
    <id>vaadin-prereleases</id>
    <url>https://maven.vaadin.com/vaadin-prereleases</url>
    <releases>
        <enabled>true</enabled>
    </releases>
    <snapshots>
        <enabled>true</enabled>
    </snapshots>
</repository>
----
add Collaboration Engine as a dependency:
[source, xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>collaboration-engine</artifactId>
    <version>[[version]]</version>
</dependency>
----
Consult the releases page to find the version number of the latest release, e.g. `1.0.0.alpha2`.
The latest version of this tutorial might use functionality that is only available in the latest snapshot build, i.e. `1.0-SNAPSHOT`.
You can use the branch selector in the GitHub UI to view the tutorial that corresponds to a specific release tag.

[[ce.tutorial.add-collaborative-feature]]
== Add Collaborative Features
This tutorial will build a view with a checkbox where the user can choose whether they are in a Friday mood.

=== Create a Simple View

First, create the view with a checkbox but not yet any collaborative functionality.
The view is annotated with `@Push` so that updates from other users can be pushed out.

[source, java]
----
@Push
@Route("")
public class TutorialView extends VerticalLayout {
  private final Checkbox checkbox;

  public TutorialView() {
      checkbox = new Checkbox("Is it Friday?");
      add(checkbox);
  }
}
----
=== Define Topic Connection

Sharing data between multiple users happens through a  `TopicConnection` instance.
Open a connection to the `tutorial` topic and store it as an instance field that we can reference later.

[source, java]
----
private final TopicConnection topic = CollaborationEngine.getInstance()
        .openTopicConnection(this, "tutorial");
----
=== Pass Values to the Topic

The first actual step to making the application collaborative is to update the topic whenever the checkbox value changes.
Update the code in the constructor to add a value change listener that updates the topic.
The value is with the `value` key inside the map of topic data.

[source, java]
----
checkbox.addValueChangeListener(valueChangeEvent -> {
    CollaborativeMap map = topic.getMap();
    map.put("value", valueChangeEvent.getValue());
});
----

=== Subscribe to Topic Changes

The final part of the code is to subscribe to updates to the topic and update the checkbox if the `value` key is changed.
This is done in the view's attach handler so that the subscription is opened only when the view is actually used.
It's also necessary to use a detach listener to close the subscription when the component is detached to avoid leaking memory.

[source, java]
----
@Override
protected void onAttach(AttachEvent attachEvent) {
    super.onAttach(attachEvent);

    Registration registration = topic.getMap().subscribe(event -> {
        if ("value".equals(event.getKey())) {
            boolean value = Boolean.TRUE.equals(event.getNewValue());
            checkbox.setValue(value);
        }
    });

    addDetachListener(detachEvent -> {
        detachEvent.unregisterListener();
        registration.remove();
    });
}
----
[[ce.tutorial.run]]
== Run the Application
* Follow instructions in the application's `README.md` file to start the application.
  The exact steps depend on the chosen tech stack.
* Open http://localhost:8080/ in multiple browser tabs to see how a change made in one tab is automatically shown in the other tabs.
