---
title: Collaborative Data Binding
order: 3
layout: page
---

[[ce.databinding]]
= Collaborative Data Binding

Vaadin provides the `Binder` API for binding values between data objects and field components with Java.
Visit https://vaadin.com/docs/v14/flow/binding-data/tutorial-flow-components-binder.html[the Vaadin docs site] to learn more about the binder.

To simplify data binding in collaborative views, a class called `CollaborativeBinder` is included in Collaboration Engine.
In addition to the basic binder features (binding, validating and converting data etc.), the collaborative binder provides two additional features:

- Field value synchronization: When a user changes a field's value, the new value gets propagated to the other users, changing the field value in their views.
- Field editing indicators: When a user has focus on a field, other users see visual indicators on the field, indicating who is currently editing it.

== Usage Example

To get started with collaborative binder, initialize a Vaadin view with `@Push` annotation, as described in the link:Tutorial.asciidoc[tutorial].
After this, let's create a data class `Person`, which currently has only one property `firstName`:

```java
public class Person {
    private String firstName;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
}
```

In the view class, we will add a text field for editing a person's first name:

```java
TextField textField = new TextField("First name");
add(textField);
```

To synchronize the value of the text field between collaborating users, add the following code to the view class:

```java
UserInfo localUser = new UserInfo("user-id");
localUser.setName("Jon Doe");

CollaborativeBinder<Person> binder = new CollaborativeBinder<>(
        Person.class, localUser, "profile");
binder.forField(textField).bind("firstName");
binder.setUserName("Jon Doe");
```

First, we need to create a `UserInfo` object that will be used in the field editing indicators.
The user's name will be displayed to other users when editing a field.
`UserInfo` has also color index property, which is used to define the user specific color used in the editing indicators.
The color index is random generated by default, so we don't need to set it explicitly.
In a real application, there should be logic to retrieve the name of the current user, which should be passed to the binder.
In this simple example, every user would have the same hard-coded name.

The `CollaborativeBinder` constructor takes three parameters: the bean type used for data binding,
the local user's information, and a topic id which will be used for opening an internal connection to that topic.

After this, we use the regular binder methods for binding the text field's value to the property "firstName".

To bind the field value to a `Person` object (to be persisted in a database or used in the application logic), use either binder's `readBean`/`writeBean` or `setBean` methods, as described in the Vaadin documentation.

[NOTE]
The other `bind` variants, which take the getter and the setter methods as separate arguments instead of the property name, do not work with the collaborative binder.
It needs a property name for binding.
