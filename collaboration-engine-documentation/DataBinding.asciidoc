---
title: Collaborative Data Binding
order: 3
layout: page
---

[[ce.databinding]]
= Collaborative Data Binding

Vaadin provides the `Binder` API for binding values between data objects and field components with Java.
Visit https://vaadin.com/docs/v14/flow/binding-data/tutorial-flow-components-binder.html[the Vaadin docs site] to learn more about the binder.

To simplify data binding in collaborative views, a class called `CollaborativeBinder` is included in Collaboration Engine.
In addition to the basic binder features (binding, validating and converting data etc.), collaborative binder propagates values between clients which are connected to the same topic.

== Usage Example

To get started with collaborative binder, initialize a Vaadin view with `@Push` annotation, as described in the link:Tutorial.asciidoc[tutorial].
After this, let's create a data class `Person`, which currently has only one property `firstName`:

```java
public class Person {
    private String firstName;

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
}
```

In the view class, we will add a text field for editing a person's first name:

```java
TextField textField = new TextField("First name");
add(textField);
```

To synchronize the value of the text field between collaborating users, add the following code to the view class:

```java
CollaborationEngine.getInstance().openTopicConnection(this, "profile",
        topic -> {
            CollaborativeBinder<Person> binder = new CollaborativeBinder<>(
                    Person.class, topic.getNamedMap("binder"));
            binder.forField(textField).bind("firstName");
            return null;
        });
```

(see the link:Tutorial.asciidoc[tutorial] for more info about `CollaborationEngine` and `openTopicConnection`)

Besides the data object type, `CollaborativeBinder` constructor needs a `CollaborativeMap` instance which will be used for propagating the field values.

After this, we use the regular binder methods for binding the text field's value to the property "firstName".

`CollaborativeBinder` takes care of removing any listeners it adds to the fields and the map when the connection gets deactivated, so we don't need to return any cleanup callbacks from the topic connection callback.
In this case, `null` can be returned.

To bind the field value to a `Person` object (to be persisted in a database or used in the application logic), use either binder's `readBean`/`writeBean` or `setBean` methods, as described in the Vaadin documentation.

[NOTE]
The other `bind` variants, which take the getter and the setter methods as separate arguments instead of the property name, do not work with the collaborative binder.
The property name is needed as it's used as the key for the collaborative map.

== Planned Features

In future versions, the plan is that `CollaborativeBinder` would also handle field highlighting out of the box.
This means visually displaying when another collaborating user is editing a field.
