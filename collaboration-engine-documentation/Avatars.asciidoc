---
title: Indicating User Presence With Avatars
order: 4
layout: page
---

[[ce.avatars]]
= Indicating User Presence With Avatars

When you are working with a collaborative application, it's really useful to see in real time who is looking at or working on the same thing as you.
To help with this use case, the collaboration engine includes a component called `CollaborativeAvatarGroup`.

== Usage Example

To get started with the collaborative avatar group, initialize a Vaadin view with `@Push` annotation, as described in the link:Tutorial.asciidoc[tutorial].

Then, we need to create a `UserInfo` object, which contains information of our local user:

```java
UserInfo localUser = new UserInfo("user-id");
localUser.setName("Jon Doe");
localUser.setImage("./profile-pic.png");
```
The constructor requires a user id, which should be unique for each user (unlike in this demonstration).
Additional information such as _name_ or _image_ will be used to render the local user's avatar in the views of other users.
The image will be rendered inside the avatar, and the name will be displayed in a tooltip when hovering over the avatar.

All the properties are optional.
If the image would not be defined, the avatar would render an abbreviation computed from the name.
The abbreviation can also be explicitly set with `setAbbreviation`.
If no name, abbreviation or image has been set, the avatar will display a simple user icon, and "anonymous" is shown instead of the name in the tooltip.

The `UserInfo` object has also `setColorIndex` method which can be used to define the user color that is used in the avatar's border.
However, it's not necessary to set this property explicitly, because a random color index will be generated and assigned to a specific user id by default.

In a real application, there should be logic to retrieve the specific user information of the current user.
In this simple example, every user would have the same hard-coded properties.

Next, we create the avatar group component itself and add it to the view:

```java
CollaborativeAvatarGroup avatarGroup = new CollaborativeAvatarGroup(
        localUser, "invoice/1234");
add(avatarGroup);
```

The constructor takes two arguments: the `UserInfo` that represents the local user and a topic id.
This example mimics a use case in an invoicing app, where we would be editing an invoice with id 1234.
When a user opens the view and the avatar group is attached,
collaboration engine sends a message to any other avatar groups connected to the same topic.
When the other avatar group instances see that a user with the provided information has joined, an avatar will be added to the group.
When the avatar group is detached, eg. by navigating away from the view or closing the browser tab, collaboration engine informs others again, and the avatar will be removed from their views.

Topic connection of an avatar group component can be changed:
```java
avatarGroup.setTopic("newTopicId");
```
This will close the connection of the avatar group component to the previous topic thus removing all existing avatars,
then the component is connected to the new topic and shows collaborating users from that topic.
