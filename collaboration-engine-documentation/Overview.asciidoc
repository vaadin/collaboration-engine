---
title: Overview
order: 1
layout: page
---

[[ce.overview]]
= Overview

Collaboration Engine is a library for creating collaborative features in web apps,
allowing end-users to collaborate together to increase productivity
and achieve better results.

== Central concepts

Collaboration between users is managed by collecting data into "topic" instances that are shared between all users interacting with the same part of the application.
There is a separate connection (`TopicConnection`) to a topic for each user.
The connection can be used to update the collaboration state and to subscribe to changes to the state.
A topic connection can be opened through a shared `CollaborationEngine` instance.
The default instance is available using the static method `CollaborationEngine.getInstance()`.
A topic is identified by a free-form string.

Each topic has a shared string-keyed map of values.
It is strongly recommended that shared values are immutable instances since subscribers are notified only when the shared value is replaced with another instance but not when the contents of an existing value is updated.
For complex values, a conditional replace operation is available to prevent overwriting concurrent modifications to other parts of the shared data.

== Limitations
This is an early iteration of Collaboration Engine with several limitations that will be addressed in the future.
The most noticeable limitations include:

* A topic only contains a single map of values.
  Future versions will support complex data structures with nested arrays and maps.
* There is not yet any high-level API for interacting with specific types of components or implementing specific use cases.
* Topic data is not persisted between server restarts.
  Applications can manually persist topic data and repopulate after a restart if necessary.
* There is no support for collaboration between multiple nodes or pods in a cluster of application servers.
  A future version will enable running Collaboration Engine as a standalone server or a cloud deployment that can be used from multiple application servers.
* There is only support for Vaadin views implemented using Java.
  Support for TypeScript views will be added later.
